import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-CpGNV3hS.js";const l={};function t(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="cors" tabindex="-1"><a class="header-anchor" href="#cors"><span>CORS</span></a></h1><h2 id="一、cors简介" tabindex="-1"><a class="header-anchor" href="#一、cors简介"><span>一、CORS简介</span></a></h2><p>跨源资源共享（Cross-Origin Resource Sharing，简称CORS）是一种机制，它使用额外的HTTP头来告诉浏览器允许一个域上的网页访问另一个域上的资源。通过这种方式，可以实现安全地跨域请求数据。</p><h2 id="二、为什么需要cors" tabindex="-1"><a class="header-anchor" href="#二、为什么需要cors"><span>二、为什么需要CORS？</span></a></h2><p>出于安全性考虑，浏览器默认会阻止跨域请求，这是同源策略（Same-origin policy）的一部分。同源指的是协议、域名以及端口号都相同。然而，在现代Web开发中，常常需要在不同源之间共享资源或进行API调用，这就需要用到CORS。</p><h2 id="三、cors的工作原理" tabindex="-1"><a class="header-anchor" href="#三、cors的工作原理"><span>三、CORS的工作原理</span></a></h2><p>当发起跨域请求时，浏览器会自动检查目标服务器是否允许当前源访问其资源。这通常涉及以下步骤：</p><ol><li><strong>预检请求（Preflight Request）</strong>：对于非简单请求（如PUT, DELETE等），浏览器首先发送一个OPTIONS请求给服务器，询问是否允许实际请求。</li><li><strong>响应头部信息</strong>：服务器通过特定的HTTP响应头告知浏览器哪些来源可以访问资源。常用的响应头包括<code>Access-Control-Allow-Origin</code>, <code>Access-Control-Allow-Methods</code>, <code>Access-Control-Allow-Headers</code>等。</li><li><strong>浏览器处理响应</strong>：如果响应头部信息符合要求，则允许跨域请求；否则，请求将被阻止。</li></ol><h2 id="四、cors响应头详解" tabindex="-1"><a class="header-anchor" href="#四、cors响应头详解"><span>四、CORS响应头详解</span></a></h2><ul><li><strong>Access-Control-Allow-Origin</strong>: 指定允许访问该资源的外域URL。可以设置为具体的域名或者<code>*</code>表示允许所有域名访问。</li><li><strong>Access-Control-Allow-Methods</strong>: 列出允许跨域请求的方法，例如GET, POST, PUT等。</li><li><strong>Access-Control-Allow-Headers</strong>: 定义了允许在请求中使用的自定义头部字段。</li><li><strong>Access-Control-Max-Age</strong>: 表示预检请求的结果可以缓存多久。</li><li><strong>Access-Control-Allow-Credentials</strong>: 表明是否允许发送Cookie等认证信息。如果设置为true，则<code>Access-Control-Allow-Origin</code>不能为<code>*</code>。</li></ul><h2 id="五、前端如何处理cors" tabindex="-1"><a class="header-anchor" href="#五、前端如何处理cors"><span>五、前端如何处理CORS？</span></a></h2><p>在前端，我们主要关注的是如何发起跨域请求并正确处理服务器返回的响应。以下是几种常见的情况：</p><ul><li><strong>简单请求</strong>：满足特定条件的GET、POST请求可以直接发起，无需预检请求。</li><li><strong>带凭据的请求</strong>：若需发送Cookies等凭证信息，需在请求时设置<code>withCredentials=true</code>，同时确保服务器端配置了<code>Access-Control-Allow-Credentials: true</code>。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://example.com/api/data&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    method</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;GET&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    credentials</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;include&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、后端如何启用cors" tabindex="-1"><a class="header-anchor" href="#六、后端如何启用cors"><span>六、后端如何启用CORS？</span></a></h2><p>不同的后端框架有不同的方式来配置CORS支持。以Node.js中的Express框架为例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> express</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;express&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> cors</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;cors&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> express</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/api/data&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;This is CORS-enabled for all origins!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Server running on port 8080&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、高级话题" tabindex="-1"><a class="header-anchor" href="#七、高级话题"><span>七、高级话题</span></a></h2><ul><li><strong>代理服务器</strong>：当无法直接修改服务器配置时，可以通过设置反向代理解决跨域问题。</li><li><strong>JSONP</strong>：一种早期的跨域解决方案，但仅限于GET请求且存在安全隐患，现已较少使用。</li><li><strong>WebSocket</strong>：不同于HTTP请求，WebSocket连接不受同源策略限制，适用于实时通信场景。</li></ul><h2 id="八、调试与错误排查" tabindex="-1"><a class="header-anchor" href="#八、调试与错误排查"><span>八、调试与错误排查</span></a></h2><ul><li>使用浏览器开发者工具查看网络请求详情，特别是响应头信息。</li><li>注意检查是否有遗漏必要的CORS响应头。</li><li>确认服务器端确实接收到请求并且正确设置了相应的CORS头。</li></ul><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>理解并掌握CORS是每一位Web开发者必备的知识点之一。无论是构建微服务架构还是集成第三方API，都需要合理运用CORS机制保障应用的安全性和兼容性。希望这篇笔记能够帮助你深入理解CORS，并在实际项目中灵活应用。</p>`,23)]))}const k=i(l,[["render",t],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/docs/program/cors/","title":"CORS","lang":"zh-CN","frontmatter":{"description":"CORS 一、CORS简介 跨源资源共享（Cross-Origin Resource Sharing，简称CORS）是一种机制，它使用额外的HTTP头来告诉浏览器允许一个域上的网页访问另一个域上的资源。通过这种方式，可以实现安全地跨域请求数据。 二、为什么需要CORS？ 出于安全性考虑，浏览器默认会阻止跨域请求，这是同源策略（Same-origin p...","head":[["meta",{"property":"og:url","content":"https://lhncxf.github.io/docs/program/cors/"}],["meta",{"property":"og:site_name","content":"RTS Memoirs"}],["meta",{"property":"og:title","content":"CORS"}],["meta",{"property":"og:description","content":"CORS 一、CORS简介 跨源资源共享（Cross-Origin Resource Sharing，简称CORS）是一种机制，它使用额外的HTTP头来告诉浏览器允许一个域上的网页访问另一个域上的资源。通过这种方式，可以实现安全地跨域请求数据。 二、为什么需要CORS？ 出于安全性考虑，浏览器默认会阻止跨域请求，这是同源策略（Same-origin p..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T07:17:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-18T07:17:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CORS\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-18T07:17:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LHN\\",\\"url\\":\\"https://lhncxf.github.io\\",\\"email\\":\\"kobeluhaonan@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"一、CORS简介","slug":"一、cors简介","link":"#一、cors简介","children":[]},{"level":2,"title":"二、为什么需要CORS？","slug":"二、为什么需要cors","link":"#二、为什么需要cors","children":[]},{"level":2,"title":"三、CORS的工作原理","slug":"三、cors的工作原理","link":"#三、cors的工作原理","children":[]},{"level":2,"title":"四、CORS响应头详解","slug":"四、cors响应头详解","link":"#四、cors响应头详解","children":[]},{"level":2,"title":"五、前端如何处理CORS？","slug":"五、前端如何处理cors","link":"#五、前端如何处理cors","children":[]},{"level":2,"title":"六、后端如何启用CORS？","slug":"六、后端如何启用cors","link":"#六、后端如何启用cors","children":[]},{"level":2,"title":"七、高级话题","slug":"七、高级话题","link":"#七、高级话题","children":[]},{"level":2,"title":"八、调试与错误排查","slug":"八、调试与错误排查","link":"#八、调试与错误排查","children":[]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]}],"git":{"createdTime":1739863054000,"updatedTime":1739863054000,"contributors":[{"name":"Kobe.Lu","username":"Kobe.Lu","email":"kobeluhaonan@gmail.com","commits":1,"url":"https://github.com/Kobe.Lu"}]},"readingTime":{"minutes":3.17,"words":952},"filePathRelative":"docs/program/cors/index.md","localizedDate":"2025年2月18日","excerpt":"\\n<h2>一、CORS简介</h2>\\n<p>跨源资源共享（Cross-Origin Resource Sharing，简称CORS）是一种机制，它使用额外的HTTP头来告诉浏览器允许一个域上的网页访问另一个域上的资源。通过这种方式，可以实现安全地跨域请求数据。</p>\\n<h2>二、为什么需要CORS？</h2>\\n<p>出于安全性考虑，浏览器默认会阻止跨域请求，这是同源策略（Same-origin policy）的一部分。同源指的是协议、域名以及端口号都相同。然而，在现代Web开发中，常常需要在不同源之间共享资源或进行API调用，这就需要用到CORS。</p>\\n<h2>三、CORS的工作原理</h2>","autoDesc":true}');export{k as comp,o as data};
