import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as c,o as i}from"./app-DTABv3Om.js";const l={};function t(n,e){return i(),r("div",null,e[0]||(e[0]=[c('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><h2 id="一、docker简介" tabindex="-1"><a class="header-anchor" href="#一、docker简介"><span>一、Docker简介</span></a></h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。Docker 使用 Go 语言编写，并遵循 Apache 2.0 协议开源。</p><h2 id="二、安装-docker" tabindex="-1"><a class="header-anchor" href="#二、安装-docker"><span>二、安装 Docker</span></a></h2><ul><li><strong>Linux</strong>: 可以通过官方提供的脚本或包管理器（如apt, yum）进行安装。</li><li><strong>macOS 和 Windows</strong>: 下载 Docker Desktop 应用程序，安装过程简单直观，适合初学者快速上手。</li></ul><h2 id="三、基本概念" tabindex="-1"><a class="header-anchor" href="#三、基本概念"><span>三、基本概念</span></a></h2><ol><li><strong>镜像 (Image)</strong>：只读模板，用于创建 Docker 容器。例如，一个 Ubuntu 镜像包含了运行 Ubuntu 所需的所有文件系统内容。</li><li><strong>容器 (Container)</strong>：独立运行的一个或一组应用及其环境。容器是镜像的运行实例。</li><li><strong>仓库 (Repository)</strong>：集中存放镜像的地方，分为公开仓库（如 Docker Hub）和私有仓库。</li></ol><h2 id="四、常用命令" tabindex="-1"><a class="header-anchor" href="#四、常用命令"><span>四、常用命令</span></a></h2><ul><li><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code>: 从仓库拉取镜像。</li><li><code>docker images</code>: 列出本地所有镜像。</li><li><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>: 创建一个新的容器并运行一个命令。</li><li><code>docker ps -a</code>: 显示所有容器，包括正在运行和停止的。</li><li><code>docker exec -it [CONTAINER ID/NAME] /bin/bash</code>: 进入一个正在运行的容器。</li><li><code>docker stop/start/restart [CONTAINER ID/NAME]</code>: 停止/启动/重启容器。</li><li><code>docker rm [CONTAINER ID/NAME]</code>: 删除容器。</li><li><code>docker rmi [IMAGE ID/NAME]</code>: 删除镜像。</li></ul><h2 id="五、dockerfile与构建镜像" tabindex="-1"><a class="header-anchor" href="#五、dockerfile与构建镜像"><span>五、Dockerfile与构建镜像</span></a></h2><p>Dockerfile 是一个文本文件，包含了一系列指令来定义如何构建一个自定义的镜像。常见的指令有：</p><ul><li><code>FROM</code>：指定基础镜像。</li><li><code>RUN</code>：执行命令并创建新的镜像层。</li><li><code>CMD</code>：提供默认的容器启动命令。</li><li><code>EXPOSE</code>：声明容器内服务监听的端口。</li><li><code>ADD/COPY</code>：复制文件到镜像中。</li><li><code>ENTRYPOINT</code>：配置容器以何种方式启动。</li></ul><p>使用 <code>docker build -t [your_image_name] .</code> 命令根据 Dockerfile 构建镜像。</p><h2 id="六、网络与存储" tabindex="-1"><a class="header-anchor" href="#六、网络与存储"><span>六、网络与存储</span></a></h2><ul><li><strong>网络</strong>：Docker 支持多种网络模式，默认为 bridge 模式。可以通过 <code>docker network</code> 命令管理网络。</li><li><strong>存储</strong>：Docker 提供了数据卷（Volumes）和绑定挂载（Bind mounts）两种方式来持久化数据。数据卷更适合长期保存的数据，而绑定挂载则更灵活。</li></ul><h2 id="七、进阶话题" tabindex="-1"><a class="header-anchor" href="#七、进阶话题"><span>七、进阶话题</span></a></h2><ul><li><strong>Docker Compose</strong>：用于定义和运行多容器 Docker 应用程序的服务工具。通过 YAML 文件配置应用服务。</li><li><strong>Swarm 与 Kubernetes</strong>：两者都是容器编排工具，帮助你管理多个容器的生命周期。Swarm 是 Docker 原生的支持，而 Kubernetes 则更为强大和流行。</li><li><strong>CI/CD 集成</strong>：将 Docker 整合到持续集成/持续部署流程中，自动化测试、构建和部署应用。</li></ul><h2 id="八、实践案例" tabindex="-1"><a class="header-anchor" href="#八、实践案例"><span>八、实践案例</span></a></h2><ul><li>实现静态资源服务器：通过 Docker 快速搭建 Nginx 环境，用来托管静态网站。</li><li>微服务架构下的应用：利用 Docker 将不同的微服务封装在各自的容器中，便于开发、测试和部署。</li><li>数据库迁移：使用 Docker 来简化数据库迁移过程，确保开发环境与生产环境的一致性。</li></ul><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>Docker 不仅是一个高性能的应用容器引擎，也是一个强大的开发和运维工具。对于前端工程师来说，掌握 Docker 能够大大提升开发效率，尤其是在团队协作和跨平台部署方面。希望这篇笔记能够帮助你快速上手 Docker 并深入理解其工作原理及应用场景。随着经验的积累，你会发现 Docker 在简化复杂任务上的巨大潜力。</p>',21)]))}const s=o(l,[["render",t],["__file","docker.html.vue"]]),h=JSON.parse('{"path":"/docs/program/devops/docker.html","title":"Docker","lang":"zh-CN","frontmatter":{"description":"Docker 一、Docker简介 Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。Docker 使用 Go 语言编写，并遵循 Apache 2.0 协议开源。 二、安装 Docker Linux: 可以通过官方提供的脚本或...","head":[["meta",{"property":"og:url","content":"https://lhncxf.github.io/docs/program/devops/docker.html"}],["meta",{"property":"og:site_name","content":"RTS Memoirs"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"Docker 一、Docker简介 Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。Docker 使用 Go 语言编写，并遵循 Apache 2.0 协议开源。 二、安装 Docker Linux: 可以通过官方提供的脚本或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T07:17:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-18T07:17:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-18T07:17:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LHN\\",\\"url\\":\\"https://lhncxf.github.io\\",\\"email\\":\\"kobeluhaonan@gmail.com\\"}]}"]]},"headers":[{"level":2,"title":"一、Docker简介","slug":"一、docker简介","link":"#一、docker简介","children":[]},{"level":2,"title":"二、安装 Docker","slug":"二、安装-docker","link":"#二、安装-docker","children":[]},{"level":2,"title":"三、基本概念","slug":"三、基本概念","link":"#三、基本概念","children":[]},{"level":2,"title":"四、常用命令","slug":"四、常用命令","link":"#四、常用命令","children":[]},{"level":2,"title":"五、Dockerfile与构建镜像","slug":"五、dockerfile与构建镜像","link":"#五、dockerfile与构建镜像","children":[]},{"level":2,"title":"六、网络与存储","slug":"六、网络与存储","link":"#六、网络与存储","children":[]},{"level":2,"title":"七、进阶话题","slug":"七、进阶话题","link":"#七、进阶话题","children":[]},{"level":2,"title":"八、实践案例","slug":"八、实践案例","link":"#八、实践案例","children":[]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]}],"git":{"createdTime":1739863054000,"updatedTime":1739863054000,"contributors":[{"name":"Kobe.Lu","username":"Kobe.Lu","email":"kobeluhaonan@gmail.com","commits":1,"url":"https://github.com/Kobe.Lu"}]},"readingTime":{"minutes":3.04,"words":912},"filePathRelative":"docs/program/devops/docker.md","localizedDate":"2025年2月18日","excerpt":"\\n<h2>一、Docker简介</h2>\\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。Docker 使用 Go 语言编写，并遵循 Apache 2.0 协议开源。</p>\\n<h2>二、安装 Docker</h2>\\n<ul>\\n<li><strong>Linux</strong>: 可以通过官方提供的脚本或包管理器（如apt, yum）进行安装。</li>\\n<li><strong>macOS 和 Windows</strong>: 下载 Docker Desktop 应用程序，安装过程简单直观，适合初学者快速上手。</li>\\n</ul>","autoDesc":true}');export{s as comp,h as data};
